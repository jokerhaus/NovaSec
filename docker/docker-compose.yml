# docker/docker-compose.yml
# NovaSec SIEM/HIDS Platform - Docker Compose

version: '3.8'

services:
  # NATS JetStream
  nats:
    image: nats:2.10-alpine
    container_name: novasec-nats
    ports:
      - "4222:4222"
      - "8222:8222"
    command: [
      "-js",
      "-m", "8222",
      "-c", "/etc/nats/nats-server.conf"
    ]
    volumes:
      - ./nats.conf:/etc/nats/nats-server.conf:ro
      - nats-data:/data
      - nats-logs:/logs
    networks:
      - novasec-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # ClickHouse
  clickhouse:
    image: clickhouse/clickhouse-server:23.8-alpine
    container_name: novasec-clickhouse
    ports:
      - "9000:9000"
      - "8123:8123"
    environment:
      - CLICKHOUSE_DB=novasec
      - CLICKHOUSE_USER=novasec
      - CLICKHOUSE_PASSWORD=novasec123
      - CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      - ./init/clickhouse-init.sh:/docker-entrypoint-initdb.d/clickhouse-init.sh:ro
    networks:
      - novasec-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    ulimits:
      nofile:
        soft: 262144
        hard: 262144

  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: novasec-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=novasec
      - POSTGRES_USER=novasec
      - POSTGRES_PASSWORD=novasec123
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init/postgres-init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - novasec-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U novasec -d novasec"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis
  redis:
    image: redis:7-alpine
    container_name: novasec-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass novasec123
    volumes:
      - redis-data:/data
    networks:
      - novasec-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # NovaSec Ingest Service
  novasec-ingest:
    build:
      context: ..
      dockerfile: docker/Dockerfile.ingest
    container_name: novasec-ingest
    ports:
      - "8080:8080"
    environment:
      - NOVASEC_CONFIG_PATH=/app/configs/ingest.yml
      - NOVASEC_LOG_LEVEL=info
    volumes:
      - ../configs:/app/configs:ro
      - ../logs:/app/logs
    networks:
      - novasec-network
    depends_on:
      nats:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # NovaSec Normalizer Service
  novasec-normalizer:
    build:
      context: ..
      dockerfile: docker/Dockerfile.normalizer
    container_name: novasec-normalizer
    environment:
      - NOVASEC_CONFIG_PATH=/app/configs/services.yml
      - NOVASEC_LOG_LEVEL=info
    volumes:
      - ../configs:/app/configs:ro
      - ../logs:/app/logs
    networks:
      - novasec-network
    depends_on:
      nats:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "-f", "novasec-normalizer"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # NovaSec Correlator Service
  novasec-correlator:
    build:
      context: ..
      dockerfile: docker/Dockerfile.correlator
    container_name: novasec-correlator
    environment:
      - NOVASEC_CONFIG_PATH=/app/configs/services.yml
      - NOVASEC_LOG_LEVEL=info
    volumes:
      - ../configs:/app/configs:ro
      - ../logs:/app/logs
      - ../internal/rules:/app/internal/rules:ro
    networks:
      - novasec-network
    depends_on:
      nats:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "-f", "novasec-correlator"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # NovaSec Alerting Service
  novasec-alerting:
    build:
      context: ..
      dockerfile: docker/Dockerfile.alerting
    container_name: novasec-alerting
    environment:
      - NOVASEC_CONFIG_PATH=/app/configs/services.yml
      - NOVASEC_LOG_LEVEL=info
    volumes:
      - ../configs:/app/configs:ro
      - ../logs:/app/logs
    networks:
      - novasec-network
    depends_on:
      nats:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "-f", "novasec-alerting"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # NovaSec Admin API Service
  novasec-adminapi:
    build:
      context: ..
      dockerfile: docker/Dockerfile.adminapi
    container_name: novasec-adminapi
    ports:
      - "8081:8080"
    environment:
      - NOVASEC_CONFIG_PATH=/app/configs/services.yml
      - NOVASEC_LOG_LEVEL=info
    volumes:
      - ../configs:/app/configs:ro
      - ../logs:/app/logs
      - ../internal/rules:/app/internal/rules:ro
    networks:
      - novasec-network
    depends_on:
      nats:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Prometheus для метрик
  prometheus:
    image: prom/prometheus:v2.47-alpine
    container_name: novasec-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - novasec-network
    restart: unless-stopped

  # Grafana для визуализации
  grafana:
    image: grafana/grafana:10.2-alpine
    container_name: novasec-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - novasec-network
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  nats-data:
    driver: local
  nats-logs:
    driver: local
  clickhouse-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  novasec-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
