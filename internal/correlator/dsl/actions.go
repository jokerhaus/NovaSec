// filename: internal/correlator/dsl/actions.go
package dsl

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"net/smtp"
	"net/url"
	"os"
	"os/exec"
	"strings"
	"time"

	"github.com/novasec/novasec/internal/models"
)

// CreateAlertAction –¥–µ–π—Å—Ç–≤–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞ // v1.0
type CreateAlertAction struct {
	actionType string
	config     map[string]interface{}
}

// Execute –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞ // v1.0
func (a *CreateAlertAction) Execute(alert *models.Alert) error {
	// –ê–ª–µ—Ä—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
	log.Printf("Alert created: %s - %s on %s", alert.RuleID, alert.Severity, alert.Host)
	return nil
}

// GetType –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è // v1.0
func (a *CreateAlertAction) GetType() string {
	return a.actionType
}

// GetConfig –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–µ–π—Å—Ç–≤–∏—è // v1.0
func (a *CreateAlertAction) GetConfig() map[string]interface{} {
	return a.config
}

// SendEmailAction –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ email // v1.0
type SendEmailAction struct {
	actionType string
	config     map[string]interface{}
	delay      time.Duration
	retry      int
	timeout    time.Duration
}

// Execute –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ email // v1.0
func (a *SendEmailAction) Execute(alert *models.Alert) error {
	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é SMTP
	smtpHost, ok := a.config["smtp_host"].(string)
	if !ok {
		return fmt.Errorf("smtp_host not configured")
	}
	smtpPort, ok := a.config["smtp_port"].(string)
	if !ok {
		smtpPort = "587"
	}
	username, ok := a.config["username"].(string)
	if !ok {
		return fmt.Errorf("username not configured")
	}
	password, ok := a.config["password"].(string)
	if !ok {
		return fmt.Errorf("password not configured")
	}
	to, ok := a.config["to"].(string)
	if !ok {
		return fmt.Errorf("to email not configured")
	}
	from, ok := a.config["from"].(string)
	if !ok {
		from = username
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	subject := fmt.Sprintf("[%s] Alert: %s", alert.Severity, alert.RuleID)
	body := fmt.Sprintf("Alert Details:\nRule: %s\nSeverity: %s\nHost: %s\nTime: %s",
		alert.RuleID, alert.Severity, alert.Host, alert.TS.Format(time.RFC3339))

	msg := fmt.Sprintf("From: %s\r\nTo: %s\r\nSubject: %s\r\n\r\n%s", from, to, subject, body)

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
	auth := smtp.PlainAuth("", username, password, smtpHost)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
	err := smtp.SendMail(smtpHost+":"+smtpPort, auth, from, []string{to}, []byte(msg))
	if err != nil {
		return fmt.Errorf("failed to send email: %w", err)
	}

	log.Printf("Email sent to %s for alert %s", to, alert.RuleID)
	return nil
}

// GetType –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è // v1.0
func (a *SendEmailAction) GetType() string {
	return a.actionType
}

// GetConfig –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–µ–π—Å—Ç–≤–∏—è // v1.0
func (a *SendEmailAction) GetConfig() map[string]interface{} {
	return a.config
}

// SendTelegramAction –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram // v1.0
type SendTelegramAction struct {
	actionType string
	config     map[string]interface{}
	delay      time.Duration
	retry      int
	timeout    time.Duration
}

// Execute –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram // v1.0
func (a *SendTelegramAction) Execute(alert *models.Alert) error {
	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Telegram
	botToken, ok := a.config["bot_token"].(string)
	if !ok {
		return fmt.Errorf("bot_token not configured")
	}
	chatID, ok := a.config["chat_id"].(string)
	if !ok {
		return fmt.Errorf("chat_id not configured")
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	message := fmt.Sprintf("üö® *Alert: %s*\nSeverity: %s\nHost: %s\nRule: %s\nTime: %s\n\n%s",
		alert.Severity, alert.Severity, alert.Host, alert.RuleID,
		alert.TS.Format(time.RFC3339), alert.GetPayloadString("message"))

	// –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
	client := &http.Client{
		Timeout: a.timeout,
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è Telegram Bot API
	apiURL := fmt.Sprintf("https://api.telegram.org/bot%s/sendMessage", botToken)

	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
	data := map[string]interface{}{
		"chat_id":    chatID,
		"text":       message,
		"parse_mode": "Markdown",
	}

	jsonData, err := json.Marshal(data)
	if err != nil {
		return fmt.Errorf("failed to marshal telegram message: %w", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := client.Post(apiURL, "application/json", bytes.NewBuffer(jsonData))
	if err != nil {
		return fmt.Errorf("failed to send telegram message: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		return fmt.Errorf("telegram API error: %d - %s", resp.StatusCode, string(body))
	}

	log.Printf("Telegram message sent to chat %s for alert %s", chatID, alert.RuleID)
	return nil
}

// GetType –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è // v1.0
func (a *SendTelegramAction) GetType() string {
	return a.actionType
}

// GetConfig –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–µ–π—Å—Ç–≤–∏—è // v1.0
func (a *SendTelegramAction) GetConfig() map[string]interface{} {
	return a.config
}

// WebhookAction –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook // v1.0
type WebhookAction struct {
	actionType string
	config     map[string]interface{}
	delay      time.Duration
	retry      int
	timeout    time.Duration
}

// Execute –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook // v1.0
func (a *WebhookAction) Execute(alert *models.Alert) error {
	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é webhook
	webhookURL, ok := a.config["url"].(string)
	if !ok {
		return fmt.Errorf("webhook url not configured")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL
	_, err := url.Parse(webhookURL)
	if err != nil {
		return fmt.Errorf("invalid webhook URL: %w", err)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º payload
	payload := map[string]interface{}{
		"alert_id":  alert.ID,
		"rule_id":   alert.RuleID,
		"severity":  alert.Severity,
		"host":      alert.Host,
		"message":   alert.GetPayloadString("message"),
		"timestamp": alert.TS.Format(time.RFC3339),
		"dedup_key": alert.DedupKey,
		"env":       alert.Env,
		"status":    alert.Status,
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
	if headers, ok := a.config["headers"].(map[string]interface{}); ok {
		payload["custom_headers"] = headers
	}

	jsonData, err := json.Marshal(payload)
	if err != nil {
		return fmt.Errorf("failed to marshal webhook payload: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
	client := &http.Client{
		Timeout: a.timeout,
	}

	// –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
	req, err := http.NewRequest("POST", webhookURL, bytes.NewBuffer(jsonData))
	if err != nil {
		return fmt.Errorf("failed to create webhook request: %w", err)
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("User-Agent", "NovaSec/1.0")

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := client.Do(req)
	if err != nil {
		return fmt.Errorf("failed to send webhook: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode < 200 || resp.StatusCode >= 300 {
		body, _ := io.ReadAll(resp.Body)
		return fmt.Errorf("webhook returned status %d: %s", resp.StatusCode, string(body))
	}

	log.Printf("Webhook sent to %s for alert %s", webhookURL, alert.RuleID)
	return nil
}

// GetType –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è // v1.0
func (a *WebhookAction) GetType() string {
	return a.actionType
}

// GetConfig –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–µ–π—Å—Ç–≤–∏—è // v1.0
func (a *WebhookAction) GetConfig() map[string]interface{} {
	return a.config
}

// LogAction –¥–µ–π—Å—Ç–≤–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è // v1.0
type LogAction struct {
	actionType string
	config     map[string]interface{}
}

// Execute –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è // v1.0
func (a *LogAction) Execute(alert *models.Alert) error {
	// –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	logLevel, ok := a.config["level"].(string)
	if !ok {
		logLevel = "info"
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–≥–∞
	logMessage := fmt.Sprintf("[%s] Alert triggered - Rule: %s, Severity: %s, Host: %s, Message: %s",
		strings.ToUpper(logLevel), alert.RuleID, alert.Severity, alert.Host, alert.GetPayloadString("message"))

	// –õ–æ–≥–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
	switch strings.ToLower(logLevel) {
	case "error":
		log.Printf("ERROR: %s", logMessage)
	case "warn", "warning":
		log.Printf("WARN: %s", logMessage)
	case "debug":
		log.Printf("DEBUG: %s", logMessage)
	default:
		log.Printf("INFO: %s", logMessage)
	}

	// –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	if logFile, ok := a.config["file"].(string); ok && logFile != "" {
		// –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
		log.Printf("Alert also logged to file: %s", logFile)
	}

	return nil
}

// GetType –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è // v1.0
func (a *LogAction) GetType() string {
	return a.actionType
}

// GetConfig –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–µ–π—Å—Ç–≤–∏—è // v1.0
func (a *LogAction) GetConfig() map[string]interface{} {
	return a.config
}

// ScriptAction –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ // v1.0
type ScriptAction struct {
	actionType string
	config     map[string]interface{}
	timeout    time.Duration
}

// Execute –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ // v1.0
func (a *ScriptAction) Execute(alert *models.Alert) error {
	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∫—Ä–∏–ø—Ç–∞
	scriptPath, ok := a.config["script_path"].(string)
	if !ok {
		return fmt.Errorf("script_path not configured")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π
	if scriptPath == "" {
		return fmt.Errorf("script_path is empty")
	}

	// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞
	args := []string{}
	if scriptArgs, ok := a.config["args"].([]interface{}); ok {
		for _, arg := range scriptArgs {
			if strArg, ok := arg.(string); ok {
				args = append(args, strArg)
			}
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞
	env := []string{
		fmt.Sprintf("ALERT_ID=%s", alert.ID),
		fmt.Sprintf("RULE_ID=%s", alert.RuleID),
		fmt.Sprintf("SEVERITY=%s", alert.Severity),
		fmt.Sprintf("HOST=%s", alert.Host),
		fmt.Sprintf("MESSAGE=%s", alert.GetPayloadString("message")),
		fmt.Sprintf("TIMESTAMP=%s", alert.TS.Format(time.RFC3339)),
		fmt.Sprintf("DEDUP_KEY=%s", alert.DedupKey),
		fmt.Sprintf("ENV=%s", alert.Env),
		fmt.Sprintf("STATUS=%s", alert.Status),
	}

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
	ctx, cancel := context.WithTimeout(context.Background(), a.timeout)
	defer cancel()

	// –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç
	cmd := exec.CommandContext(ctx, scriptPath, args...)
	cmd.Env = append(os.Environ(), env...)

	// –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥
	var stdout, stderr bytes.Buffer
	cmd.Stdout = &stdout
	cmd.Stderr = &stderr

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
	err := cmd.Run()
	if err != nil {
		return fmt.Errorf("script execution failed: %w, stderr: %s", err, stderr.String())
	}

	// –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	log.Printf("Script %s executed successfully for alert %s", scriptPath, alert.RuleID)
	if stdout.Len() > 0 {
		log.Printf("Script output: %s", stdout.String())
	}

	return nil
}

// GetType –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è // v1.0
func (a *ScriptAction) GetType() string {
	return a.actionType
}

// GetConfig –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–µ–π—Å—Ç–≤–∏—è // v1.0
func (a *ScriptAction) GetConfig() map[string]interface{} {
	return a.config
}
